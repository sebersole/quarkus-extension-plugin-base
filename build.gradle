plugins {
    // plugin
    id 'java-library'
    id 'publishing'

    // NOTE : the plugin would apply the `publishing` plugin just to get access
    // to PublishingExtension, Publication, etc.
    //
    // The extension would configure to use `maven-publishing` or `ivy-publishing`
    // and to define the repositories.
    //
    // However, this means (most likely) that the plugin will need to be sensitive to
    // which specific one was added in order to properly define the Publications (which
    // are specific to each publishing plugin)
    id 'maven-publish'
}

group 'io.github.sebersole'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

var extensionName = "my-extension"

// plugin
sourceSets {
    deployment
    spi

// added by the java-library plugin
//    main
//    test
}


// plugin
afterEvaluate {
    if ( ! sourceSets.spi.java.isEmpty() || ! sourceSets.spi.resources.isEmpty() ) {
        logger.lifecycle 'SPI sourceSet contained java/resources'

        task spiJar(type: Jar) {
            description = 'Creates the SPI artifact'
            dependsOn tasks.compileSpiJava
            tasks.compileJava.dependsOn it

            archivesBaseName = extensionName
            archiveAppendix = 'spi'

            destinationDirectory = project.layout.buildDirectory.dir( 'libs' )
            from sourceSets.spi.java.destinationDirectory
        }

        dependencies {
            implementation files( tasks.spiJar.archiveFile )
        }

        publishing {
            publications {
                spi(MavenPublication) {
                    artifactId = "my-extension-spi"
                }
            }
        }
    }
    else {
        logger.lifecycle 'SPI sourceSet did not contain java/resources'
    }
}


configurations {
    // plugin
    quarkusPlatform {
        description = 'Gradle Configuration for defining Quarkus platforms (boms) to be applied'
    }

    // plugin
//    deploymentImplementation {
//        extendsFrom runtimeElements
//    }
}

// plugin
configurations.all {
    if ( it.name != 'quarkusPlatform' ) {
        it.extendsFrom configurations.quarkusPlatform
    }
}

tasks.jar {
    archivesBaseName = extensionName
}

// plugin
task deploymentJar(type: Jar) {
    description = 'Creates the deployment artifact'
    dependsOn tasks.compileDeploymentJava

    archivesBaseName = extensionName
    archiveAppendix = 'deployment'

    destinationDirectory = project.layout.buildDirectory.dir( 'libs' )
    from sourceSets.deployment.java.destinationDirectory
}

// plugin
tasks.compileTestJava.dependsOn tasks.deploymentJar

dependencies {
    // plugin
    quarkusPlatform enforcedPlatform( 'io.quarkus:quarkus-bom:2.8.0.Final' )

    // plugin
    implementation 'io.quarkus:quarkus-core'

    // plugin
    deploymentImplementation 'io.quarkus:quarkus-core-deployment'

    // plugin
    deploymentCompileOnly project.files( tasks.jar.archiveFile )

    // plugin - this part will need to be added to the generated pom directly (as compile scope)
    //deploymentRuntimeOnly "io.github.sebersole:my-extension:${project.version}"

    // plugin
    testImplementation project.files( tasks.deploymentJar.archiveFile )

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}


test {
    useJUnitPlatform()
}

publishing {
    publications {
        // plugin
        deployment(MavenPublication) {
            artifactId = "my-extension-deployment"

            artifact project.tasks.deploymentJar
        }
        runtime(MavenPublication) {
            artifactId = "my-extension"
            from components.java
        }
    }

    repositories {

    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    // See https://docs.gradle.org/current/userguide/publishing_setup.html#sec:suppressing_validation_errors
    suppressedValidationErrors.add('enforced-platform')
}

